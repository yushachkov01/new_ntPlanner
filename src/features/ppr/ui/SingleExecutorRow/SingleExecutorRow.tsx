import { useDroppable } from '@dnd-kit/core';
import type { FC } from 'react';

import { parseTimeToMinutes } from '@/shared/ui/time/toTime';
import type { Props } from '@features/ppr/ui/PprRow/PprRow';
import TemplateFrameBlock from '@features/ppr/ui/TemplateFrameBlock/TemplateFrameBlock';
import TimelineBlock from '@features/ppr/ui/TimelineBlock/TimelineBlock';
import type { BlockExt } from '@pages/PprPage/ui/PprPage';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –±–ª–æ–∫ —ç—Ç–∞–ø —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é –∏–Ω–∂–µ–Ω–µ—Ä–∞.
 * @param block - –±–ª–æ–∫ —Å –Ω–∞–±–æ—Ä–æ–º —ç—Ç–∞–ø–æ–≤
 * @param role - —Ä–æ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns true, –µ—Å–ª–∏ —Ç–∞–∫–æ–π —ç—Ç–∞–ø –Ω–∞–π–¥–µ–Ω
 */
const hasStage = (block: BlockExt, role: string) =>
  block.stageKeys.some((k) => (block.stagesField?.[k] as any)?.engineer === role);

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ç–∞–π–º–ª–∞–π–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
 * –†–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ "–ø–æ–ª–∫–∏" –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞—Ö –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç
 * —Ä–∞–º–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∑–∞–¥–∞—á.
 * @param row - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –∏ –µ–≥–æ –±–ª–æ–∫–∞—Ö
 * @param hourLabels - –º–µ—Ç–∫–∏ —á–∞—Å–æ–≤ –¥–ª—è —Å–µ—Ç–∫–∏
 * @param spanMin - –¥–ª–∏–Ω–∞ –æ–∫–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
 * @param startMin - –Ω–∞—á–∞–ª–æ –æ–∫–Ω–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç 00:00
 * @param coverageMap - –∫–∞—Ä—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —ç—Ç–∞–ø–æ–≤
 * @param openBlockId - id —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –±–ª–æ–∫–∞
 * @param setOpenBlockId - —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –±–ª–æ–∫–∞
 * @param onBlockClick - –∫–æ–ª–±—ç–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —à–∞–±–ª–æ–Ω (tplIdx)
 */
const SingleExecutorRow: FC<Props> = ({
  row,
  hourLabels,
  spanMin,
  startMin,
  coverageMap,
  openBlockId,
  setOpenBlockId,
  onBlockClick,
}) => {
  const { setNodeRef } = useDroppable({ id: row.id });

  /**
   * –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –ï—Å–ª–∏ –±–ª–æ–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.
   */
  const blocks = row.blocks ?? [];
  /**
   * –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —à–∞–±–ª–æ–Ω–æ–≤ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –û–ø—Ä–µ–¥–µ–ª—è—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ø–æ–ª–æ–∫".
   */
  const tplIds = Array.from(new Set(blocks.map((block) => block.tplIdx)));
  /** –¥–ª—è —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤—ã—Å–æ—Ç–∞ –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞ ¬´–ø–æ–ª–∫–∞¬ª */
  const rowParts = 1;
  const laneIdx = 0;

  const isRowSMR = row.role === '–ò–Ω–∂–µ–Ω–µ—Ä –°–ú–†';
  const isRowPZ = row.role === '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ó–∞–∫–∞–∑—á–∏–∫–∞';

  return (
    <div ref={setNodeRef} className="timeline-row">
      <div className="timeline-row__icon-cell">
        <div className="avatar-single">
          <span className="avatar-icon">üë§</span>
        </div>
      </div>
      <div className="timeline-row__label-cell">{row.author}</div>

      <div
        className="timeline-row__blocks"
        style={{ gridTemplateColumns: `repeat(${hourLabels.length}, 1fr)` }}
      >
        {hourLabels.map((_, i) => (
          <div key={i} className="timeline-row__grid-cell" />
        ))}

        {tplIds.map((tplIdx) => {
          const inner = blocks.filter((block) => block.tplIdx === tplIdx);
          if (!inner.length) return null;

          // –≤—ã—á–∏—Å–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —à–∞–±–ª–æ–Ω–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
          const s = Math.min(...inner.map((block) => parseTimeToMinutes(block.startTime)));
          let e = Math.max(
            ...inner.map((block) => {
              const st = parseTimeToMinutes(block.startTime),
                en = parseTimeToMinutes(block.endTime);
              return en <= st ? en + 1440 : en;
            }),
          );
          if (e <= s) e += 1440;

          const widthPx =
            document.querySelector('.timeline-row__blocks')?.getBoundingClientRect().width ?? 0;

          return (
            <TemplateFrameBlock
              key={`row-${row.id}-${tplIdx}`}
              idx={row.id * 1000 + tplIdx}
              startMin={s}
              endMin={e}
              windowStartMin={startMin}
              totalWindowMin={spanMin}
              containerWidthPx={widthPx}
              rowParts={rowParts}
              partIndex={laneIdx}
              onToggleExpand={() => {}}
              isSMRTemplate={isRowSMR || inner.some((block) => hasStage(block, '–ò–Ω–∂–µ–Ω–µ—Ä –°–ú–†'))}
              isPZTemplate={
                isRowPZ || inner.some((block) => hasStage(block, '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ó–∞–∫–∞–∑—á–∏–∫–∞'))
              }
            >
              {inner.map((block) => (
                <TimelineBlock
                  key={`blk-${row.id}-${block.id}`}
                  block={block}
                  totalWindowMin={e - s}
                  windowStartMin={s}
                  expandedBlockId={openBlockId}
                  setExpandedBlockId={setOpenBlockId}
                  onDoubleClickBlock={setOpenBlockId}
                  isCovered={!!coverageMap[block.id]}
                  onClick={() => onBlockClick(block.tplIdx)}
                  showStages
                  laneParts={rowParts}
                  laneIndex={laneIdx}
                />
              ))}
            </TemplateFrameBlock>
          );
        })}
      </div>
    </div>
  );
};

export default SingleExecutorRow;
