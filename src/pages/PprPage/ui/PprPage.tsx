import type { FC } from 'react';
import { useState } from 'react';

import accountIcon from '@/assets/icons-account.png';

import type { SubStep } from './TaskDetail';
import TaskDetail from './TaskDetail';
import TimelineBlock from './TimelineBlock';

import './PprPage.css';

interface UserData {
  id: number;
  name: string;
  blocks: BlockData[];
}

function timeStringToMinutes(time: string): number {
  const [h, m] = time.split(':').map(Number);
  return h * 60 + m;
}

export interface BlockData {
  id: number;
  startTime: string;
  endTime: string;
  label: string;
  subSteps?: SubStep[];
}

const users: UserData[] = [
  {
    id: 1,
    name: '–ò–≤–∞–Ω–æ–≤ –ò.–ò.',
    blocks: [
      {
        id: 101,
        startTime: '00:15',
        endTime: '02:00',
        label: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
        subSteps: [
          { id: 1001, label: '–ü–æ–¥—ç—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î' },
          { id: 1002, label: '–ü–æ–¥—ç—Ç–∞–ø 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API' },
        ],
      },
      {
        id: 102,
        startTime: '06:45',
        endTime: '08:00',
        label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        subSteps: [
          { id: 1003, label: '–ü–æ–¥—ç—Ç–∞–ø 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ü–û' },
          { id: 1004, label: '–ü–æ–¥—ç—Ç–∞–ø 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è' },
        ],
      },
      {
        id: 103,
        startTime: '20:30',
        endTime: '22:10',
        label: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞',
        subSteps: [
          { id: 1005, label: '–ü–æ–¥—ç—Ç–∞–ø 1: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö' },
          { id: 1006, label: '–ü–æ–¥—ç—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞' },
        ],
      },
    ],
  },
  {
    id: 2,
    name: '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.',
    blocks: [
      {
        id: 201,
        startTime: '01:00',
        endTime: '03:45',
        label: '–î–æ—Å—Ç—É–ø –∫ –ë–î',
        subSteps: [
          { id: 2001, label: '–ü–æ–¥—ç—Ç–∞–ø 1: –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏' },
          { id: 2002, label: '–ü–æ–¥—ç—Ç–∞–ø 2: –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã' },
        ],
      },
      {
        id: 202,
        startTime: '07:00',
        endTime: '09:15',
        label: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û',
        subSteps: [
          { id: 2003, label: '–ü–æ–¥—ç—Ç–∞–ø 1: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤' },
          { id: 2004, label: '–ü–æ–¥—ç—Ç–∞–ø 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞' },
        ],
      },
      {
        id: 203,
        startTime: '15:00',
        endTime: '18:30',
        label: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        subSteps: [
          { id: 2005, label: '–ü–æ–¥—ç—Ç–∞–ø 1: –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã' },
          { id: 2006, label: '–ü–æ–¥—ç—Ç–∞–ø 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã' },
        ],
      },
    ],
  },
  {
    id: 3,
    name: '–°–∏–¥–æ—Ä–æ–≤ –°.–°.',
    blocks: [
      {
        id: 301,
        startTime: '02:30',
        endTime: '04:00',
        label: '–¢–µ—Å—Ç LAN',
        subSteps: [
          { id: 3001, label: '–ü–æ–¥—ç—Ç–∞–ø 1: –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å' },
          { id: 3002, label: '–ü–æ–¥—ç—Ç–∞–ø 2: –ó–∞–¥–µ—Ä–∂–∫–∏' },
        ],
      },
      {
        id: 302,
        startTime: '12:00',
        endTime: '13:30',
        label: '–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫',
        subSteps: [
          { id: 3003, label: '–ü–æ–¥—ç—Ç–∞–ø 1: –ö–æ–¥-—Ä–µ–≤—å—é' },
          { id: 3004, label: '–ü–æ–¥—ç—Ç–∞–ø 2: –°–ª–∏—è–Ω–∏–µ' },
        ],
      },
      {
        id: 303,
        startTime: '23:00',
        endTime: '23:59',
        label: '–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö',
        subSteps: [
          { id: 3005, label: '–ü–æ–¥—ç—Ç–∞–ø 1: –°–∂–∞—Ç–∏–µ' },
          { id: 3006, label: '–ü–æ–¥—ç—Ç–∞–ø 2: –ü–µ—Ä–µ–Ω–æ—Å' },
        ],
      },
    ],
  },
];

const PprPage: FC = () => {
  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä—è–¥—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
   */

  const [expandedUsers, setExpandedUsers] = useState(false);

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ª–∏ —Å–µ–∫—Ü–∏—é ¬´–í—Å–µ –∑–∞–¥–∞—á–∏¬ª (–ø–æ–¥ —Ç–∞–π–º–ª–∞–π–Ω–æ–º)
   */
  const [showAllTasks, setShowAllTasks] = useState(false);

  /**
   * –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è popover (–æ–¥–∏–Ω–∞—Ä–Ω—ã–π –∫–ª–∏–∫)
   */
  const [expandedBlockId, setExpandedBlockId] = useState<number | null>(null);

  /**
   *    –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è TaskDetail (–¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫)
   */
  const [expandedTaskId, setExpandedTaskId] = useState<number | null>(null);

  const handleBlockDouble = (blockId: number) => {
    setExpandedTaskId((prev) => (prev === blockId ? null : blockId));
  };

  const findBlockById = (id: number | null): BlockData | null => {
    if (id === null) return null;
    for (const u of users) {
      const found = u.blocks.find((b) => b.id === id);
      if (found) return found;
    }
    return null;
  };
  const taskDetailData = findBlockById(expandedTaskId);

  const aggregatedRow = {
    id: 0 as const,
    name: '–í–µ—Å—å –¥–µ–Ω—å' as const,
    blocks: users.flatMap((u) => u.blocks),
  };
  const rowsData = [aggregatedRow, ...(expandedUsers ? users : [])];

  const spanHours = 24;
  const hours = Array.from({ length: spanHours }, (_, i) => i);
  const totalWindowMin = spanHours * 60;

  return (
    <div className="ppr-page">
      <h2 className="ppr-page__title">–¢–∞–π–º–ª–∞–π–Ω (00:00‚Äì23:00)</h2>

      <div className="timeline-container">
        <div className="timeline-header">
          <div className="timeline-header__spacer" />
          <div className="timeline-header__label-spacer" />
          {hours.map((h) => (
            <div key={h} className="timeline-header__hour">
              {h.toString().padStart(2, '0')}:00
            </div>
          ))}
        </div>

        <div className="timeline-body">
          {rowsData.map((rowItem) => (
            <div key={rowItem.id} className="timeline-row">
              <div className="timeline-row__icon-cell">
                {rowItem.id === 0 ? (
                  <div
                    className="avatar-combined"
                    onClick={() => {
                      setExpandedUsers((prev) => !prev);
                      setShowAllTasks(false);
                      setExpandedTaskId(null);
                    }}
                  >
                    {users.slice(0, 2).map((u, idx) => (
                      <div
                        key={u.id}
                        className="avatar-combined__circle"
                        style={{ left: `${idx * 0.75}rem` }}
                      >
                        <span className="avatar-icon">üë§</span>
                      </div>
                    ))}
                    {users.length > 2 && (
                      <div
                        className="avatar-combined__circle avatar-combined__more"
                        style={{ left: `${2 * 0.75}rem` }}
                      >
                        +{users.length - 2}
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="avatar-with-name">
                    <div className="avatar-single">
                      <img src={accountIcon} alt="User" className="avatar-single__img" />
                    </div>
                    <div className="avatar-name">{rowItem.name.split(' ')[0]}</div>
                  </div>
                )}
              </div>
              <div className="timeline-row__label-cell">
                {rowItem.id === 0 && (
                  <span
                    className="timeline-row__day-label"
                    onClick={() => {
                      setShowAllTasks((prev) => !prev);
                      setExpandedUsers(false);
                      setExpandedTaskId(null);
                    }}
                  >
                    –í–µ—Å—å
                    <br />
                    –¥–µ–Ω—å
                  </span>
                )}
              </div>
              <div className="timeline-row__blocks">
                {hours.map((_, i) => (
                  <div key={i} className="timeline-row__grid-cell" />
                ))}
                {(rowItem as any).blocks.map((block: BlockData) => (
                  <TimelineBlock
                    key={block.id}
                    block={block}
                    totalWindowMin={totalWindowMin}
                    expandedBlockId={expandedBlockId}
                    setExpandedBlockId={setExpandedBlockId}
                    onDoubleClickBlock={handleBlockDouble}
                  />
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
      {showAllTasks && (
        <div className="all-tasks-container">
          {users
            .flatMap((u) => u.blocks)
            .map((block) => (
              <TaskDetail
                key={block.id}
                label={block.label}
                startTime={block.startTime}
                endTime={block.endTime}
                subSteps={block.subSteps}
                onClose={() => {}}
              />
            ))}
        </div>
      )}
      {taskDetailData && (
        <TaskDetail
          label={taskDetailData.label}
          startTime={taskDetailData.startTime}
          endTime={taskDetailData.endTime}
          subSteps={taskDetailData.subSteps}
          onClose={() => setExpandedTaskId(null)}
        />
      )}
    </div>
  );
};

export default PprPage;
