import type { FC } from 'react';
import React, { useEffect, useState, useMemo } from 'react';

import type { StageField } from '@/entities/template/model/store/templateStore';
import { executorStore } from '@entities/executor/model/store/executorStore';
import type { Executor as ExecutorEntity } from '@entities/executor/model/store/executorStore';
import { calcCoveredMap } from '@features/ppr/lib/calcCoveredMap';
import TaskDetail from '@features/ppr/ui/TaskDetail/TaskDetail';
import TimelineBlock from '@features/ppr/ui/TimelineBlock/TimelineBlock';
import './PprPage.css';

/**
 * –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–∞ —Å–µ—Ç–∫–µ
 * @property start - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
 * @property end - –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
 */
interface WindowInterval {
  start: string;
  end: string;
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏ (–±–ª–æ–∫–∞) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ç–∞–π–º–ª–∞–π–Ω–µ
 * @property id - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–ª–æ–∫–∞
 * @property label - –º–µ—Ç–∫–∞/–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
 * @property startTime - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ "HH:MM"
 * @property endTime - –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ "HH:MM"
 * @property status - —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 * @property subSteps - –ø–æ–¥–∑–∞–¥–∞—á–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 * @property tplIdx - –∏–Ω–¥–µ–∫—Å —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–∏ –∫–ª–∏–∫–∞—Ö
 * @property stageKeys - –∫–ª—é—á–∏ —ç—Ç–∞–ø–æ–≤ –∑–∞–¥–∞—á–∏
 * @property stagesField - –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–∞–ø–∞–º –¥–ª—è –∑–∞–¥–∞—á–∏
 */
interface BlockExt {
  id: number;
  label: string;
  startTime: string;
  endTime: string;
  status?: string;
  subSteps?: string[];
  tplIdx: number;
  stageKeys: string[];
  stagesField: Record<string, StageField>;
}

/**
 * –¢–∏–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –±–ª–æ–∫–∞–º–∏ –∑–∞–¥–∞—á
 * @property id - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
 * @property author - –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
 * @property role - —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
 * @property blocks - —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ –∑–∞–¥–∞—á –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 */
interface Executor {
  id: number;
  author: string;
  role: string;
  blocks?: BlockExt[];
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç—Ç–∞–ø–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏
 * @property currentStages - –∫–ª—é—á–∏ —Ç–µ–∫—É—â–∏—Ö —ç—Ç–∞–ø–æ–≤
 * @property stagesField - –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—è–º —ç—Ç–∞–ø–æ–≤
 */
export interface StageCfg {
  currentStages: string[];
  stagesField: Record<string, StageField>;
}

/**
 * –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ PprPage
 * @property gridStart - –Ω–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Ç–∫–∏ "HH:MM" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "00:00")
 * @property gridEnd - –∫–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Ç–∫–∏ "HH:MM" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "23:00")
 * @property highlightWindows - –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
 * @property executors - —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
 * @property templateKeys - –∫–ª—é—á–∏ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è highlightWindows
 * @property onBlockClick - —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –±–ª–æ–∫
 * @property onTimerChange - —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏
 */
interface Props {
  gridStart?: string;
  gridEnd?: string;
  highlightWindows?: WindowInterval[];
  executors: Executor[];
  templateKeys: string[];
  onBlockClick: (tplIdx: number) => void;
  onTimerChange: (tplIdx: number, stageKey: string, newTimer: number) => void;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–π–º–ª–∞–π–Ω –∑–∞–¥–∞—á –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—è–º–∏.
 */
const PprPage: FC<Props> = ({
  gridStart = '00:00',
  gridEnd = '23:00',
  highlightWindows = [],
  executors,
  templateKeys,
  onBlockClick,
  onTimerChange,
}) => {
  /** –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ Zustand */
  const executorMap = executorStore((state) => state.executors);

  /** –ü–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π */
  const flatExecutors: ExecutorEntity[] = useMemo(
    () => Object.values(executorMap).flat(),
    [executorMap],
  );

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ "HH:MM" –≤ –º–∏–Ω—É—Ç—ã —Å –Ω–∞—á–∞–ª–∞ —Å—É—Ç–æ–∫
   */
  const timeStringToMinutes = (timeString: string): number => {
    const [hours, minutes] = timeString.split(':').map(Number);
    return hours * 60 + minutes;
  };

  /** –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å–µ—Ç–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö */
  const startMinutes = timeStringToMinutes(gridStart);
  const endMinutes =
    timeStringToMinutes(gridEnd) <= startMinutes
      ? timeStringToMinutes(gridEnd) + 1440
      : timeStringToMinutes(gridEnd);
  const spanMinutes = endMinutes - startMinutes;

  /** –ú–µ—Ç–∫–∏ —á–∞—Å–æ–≤ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ—Ç–∫–∏ */
  const hourLabels = Array.from({ length: Math.ceil(spanMinutes / 60) + 1 }, (_, index) =>
    Math.floor(((startMinutes + index * 60) % 1440) / 60),
  );

  /** –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –∑–∞–¥–∞—á */
  const blocksList: BlockExt[] = executors.flatMap((executor) => executor.blocks ?? []);

  /** –ö–∞—Ä—Ç–∞ –¥–ª—è ¬´–ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö¬ª –±–ª–æ–∫–æ–≤ (–¥–ª—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è) */
  const coverageMap = useMemo(() => calcCoveredMap(blocksList), [blocksList]);

  /** –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º */
  const [openBlockId, setOpenBlockId] = useState<number | null>(null);
  const [isExpandedUsers, setExpandedUsers] = useState(false);
  const [isShowingAll, setShowingAll] = useState(false);
  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);

  /** –ê–∫—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫ –¥–µ—Ç–∞–ª–µ–π –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É */
  const activeBlock: BlockExt | null = useMemo(
    () => blocksList.find((block) => block.id === openBlockId) ?? null,
    [openBlockId, blocksList],
  );
  const getOwnerName = (blockId: number): string =>
    executors.find((executor) => executor.blocks?.some((block) => block.id === blockId))?.author ??
    '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';

  /** –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: –≤—Å–µ–≥–æ –∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º */
  const totalRow = { id: 0, author: '–í–µ—Å—å –¥–µ–Ω—å', blocks: blocksList };
  const rowEntries = [totalRow, ...(isExpandedUsers ? executors : [])];

  /** –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ —ç—Ç–∞–ø–∞–º –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ */
  const executorsByStage: Record<string, ExecutorEntity[]> = {};
  if (activeBlock) {
    activeBlock.stageKeys.forEach((stageKey) => {
      executorsByStage[stageKey] = [
        { id: activeBlock.id, author: getOwnerName(activeBlock.id), role: '' },
      ];
    });
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∫ —ç—Ç–∞–ø—É
   */
  const handleExecutorAdd = (stageKey: string, executorEntity: ExecutorEntity) => {
    executorsByStage[stageKey] = [...(executorsByStage[stageKey] || []), executorEntity];
  };

  /**
   * –£–¥–∞–ª—è–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ —ç—Ç–∞–ø–∞
   */
  const handleExecutorRemove = (stageKey: string, executorId: number) => {
    executorsByStage[stageKey] =
      executorsByStage[stageKey]?.filter((e) => e.id !== executorId) ?? [];
  };

  return (
    <div className="ppr-page">
      <h2 className="ppr-page__title">
        –¢–∞–π–º–ª–∞–π–Ω ({gridStart}‚Äì{gridEnd})
      </h2>
      <div
        className="timeline-header"
        style={{ gridTemplateColumns: `4rem 4rem repeat(${hourLabels.length},1fr)` }}
      >
        <div />
        <div />
        {hourLabels.map((hour) => (
          <div key={hour}>{String(hour).padStart(2, '0')}:00</div>
        ))}
      </div>
      {rowEntries.map((row, rowIndex) => (
        <div key={rowIndex} className="timeline-row">
          <div className="timeline-row__icon-cell">
            {row.id === 0 ? (
              <div
                className="avatar-combined"
                onClick={() => {
                  setExpandedUsers((prev) => !prev);
                  setShowingAll(false);
                  setSelectedUserId(null);
                  setOpenBlockId(null);
                }}
              >
                {executors.slice(0, 2).map((executor, idx) => (
                  <div
                    key={executor.id}
                    className="avatar-combined__circle"
                    style={{ left: `${idx * 0.75}rem` }}
                  >
                    <span className="avatar-icon">üë§</span>
                  </div>
                ))}
                {executors.length > 2 && (
                  <div
                    className="avatar-combined__circle avatar-combined__more"
                    style={{ left: '1.5rem' }}
                  >
                    +{executors.length - 2}
                  </div>
                )}
              </div>
            ) : (
              <div
                className="avatar-with-name"
                onClick={() => {
                  setSelectedUserId((prev) => (prev === row.id ? null : row.id));
                  setShowingAll(false);
                  setOpenBlockId(null);
                }}
              >
                <div className="avatar-single">
                  <span className="avatar-icon">üë§</span>
                </div>
                <div className="avatar-name">{row.author}</div>
              </div>
            )}
          </div>
          <div className="timeline-row__label-cell">
            {row.id === 0 && (
              <span
                className="timeline-row__day-label"
                onClick={() => {
                  setShowingAll((prev) => !prev);
                  setExpandedUsers(false);
                  setOpenBlockId(null);
                }}
              >
                –í—Å–µ
                <br />
                –ó–∞–¥–∞—á–∏
              </span>
            )}
          </div>
          <div
            className="timeline-row__blocks"
            style={{ gridTemplateColumns: `repeat(${hourLabels.length},1fr)` }}
          >
            {hourLabels.map((_, idx) => (
              <div key={idx} className="timeline-row__grid-cell" />
            ))}
            {row.id === 0 &&
              highlightWindows!.map((w, idx) => {
                const startVal =
                  timeStringToMinutes(w.start) < startMinutes
                    ? timeStringToMinutes(w.start) + 1440
                    : timeStringToMinutes(w.start);
                const endVal =
                  timeStringToMinutes(w.end) < startMinutes
                    ? timeStringToMinutes(w.end) + 1440
                    : timeStringToMinutes(w.end);
                const leftPercent = ((startVal - startMinutes) / spanMinutes) * 100;
                const widthPercent = ((endVal - startMinutes) / spanMinutes) * 100 - leftPercent;
                return (
                  <div
                    key={idx}
                    className="template-frame"
                    title={`${templateKeys[idx]}: ${w.start}‚Äì${w.end}`}
                    style={{ left: `${leftPercent}%`, width: `${widthPercent}%` }}
                  />
                );
              })}
            {row.blocks?.map((block) => (
              <TimelineBlock
                key={block.id}
                block={block}
                totalWindowMin={spanMinutes}
                windowStartMin={startMinutes}
                expandedBlockId={openBlockId}
                setExpandedBlockId={setOpenBlockId}
                onDoubleClickBlock={() => setOpenBlockId(block.id)}
                isCovered={!!coverageMap[block.id]}
                onClick={() => onBlockClick(block.tplIdx)}
              />
            ))}
          </div>
        </div>
      ))}
      {isShowingAll && (
        <div className="all-tasks-container">
          {blocksList.map((block) => (
            <TaskDetail
              key={block.id}
              id={block.id}
              label={block.label}
              startTime={block.startTime}
              endTime={block.endTime}
              performer={`–†–¢–ö‚Äë–°, ${getOwnerName(block.id)}`}
              status={block.status}
              subSteps={block.subSteps}
              allExecutors={flatExecutors}
              executorsByStage={executorsByStage}
              onExecutorAdd={handleExecutorAdd}
              onExecutorRemove={handleExecutorRemove}
              onTimerChange={(stageKey, val) => onTimerChange(block.tplIdx, stageKey, val)}
              stageKeys={block.stageKeys}
              stagesField={block.stagesField}
              onClose={() => setShowingAll(false)}
            />
          ))}
        </div>
      )}
      {selectedUserId != null && (
        <div className="user-tasks-container">
          {executors
            .find((executor) => executor.id === selectedUserId)
            ?.blocks?.map((block) => (
              <TaskDetail
                key={block.id}
                id={block.id}
                label={block.label}
                startTime={block.startTime}
                endTime={block.endTime}
                performer={`–†–¢–ö‚Äë–°, ${getOwnerName(block.id)}`}
                status={block.status}
                subSteps={block.subSteps}
                allExecutors={flatExecutors}
                executorsByStage={executorsByStage}
                onExecutorAdd={handleExecutorAdd}
                onExecutorRemove={handleExecutorRemove}
                onTimerChange={(stageKey, val) => onTimerChange(block.tplIdx, stageKey, val)}
                stageKeys={block.stageKeys}
                stagesField={block.stagesField}
                onClose={() => setSelectedUserId(null)}
              />
            ))}
        </div>
      )}
      {activeBlock && (
        <TaskDetail
          key={activeBlock.id}
          id={activeBlock.id}
          label={activeBlock.label}
          startTime={activeBlock.startTime}
          endTime={activeBlock.endTime}
          performer={`–†–¢–ö‚Äë–°, ${getOwnerName(activeBlock.id)}`}
          status={activeBlock.status}
          subSteps={activeBlock.subSteps}
          allExecutors={flatExecutors}
          executorsByStage={executorsByStage}
          onExecutorAdd={handleExecutorAdd}
          onExecutorRemove={handleExecutorRemove}
          onTimerChange={(stageKey, val) => onTimerChange(activeBlock.tplIdx, stageKey, val)}
          stageKeys={activeBlock.stageKeys}
          stagesField={activeBlock.stagesField}
          onClose={() => setOpenBlockId(null)}
        />
      )}
    </div>
  );
};

export default PprPage;
